Tipo_prog <-.Unianalysis(Metric_frame2$NM_GRAU_PROGRAMA)
barplot(Tipo_prog$Freq,
names.arg=paste(as.integer(Tipo_prog$proportion), "%"),
xlab="Percentual",
ylab="Quantidade de programas",
legend=Tipo_prog$x,
col=rainbow(8),
main="3. Programas de Pós Graduação por tipo",border="red")
#3. Graduate per Capes Score
Conceito_prog <- .Unianalysis(Metric_frame2$CD_CONCEITO_PROGRAMA)
barplot(Conceito_prog$Freq,
names.arg=Conceito_prog$x,
xlab="Conceito Capes",
ylab="Quantidade de programas",
legend= paste(as.integer(Conceito_prog$proportion), "%"),
ylim = c(0, 400),
col=rainbow(8),
main="4. Programas de Pós Graduação por Conceito Capes",border="red")
#4. Graduate per field
Area_Avalia_prog <- .Unianalysis(Metric_frame2$NM_AREA_AVALIACAO)
DT::datatable(Area_Avalia_prog)
#5. Programa por ano
Ano_prog <- .Unianalysis(Metric_frame2$ANO_INICIO_PROGRAMA)
Ano_prog <- arrange(Ano_prog, desc(Ano_prog$Freq))
DT::datatable(Ano_prog)
#Histogram
histogram=function(x){
hist(x,prob=T)
lines(density(x),col="red")
curve(dnorm(x,mean(x), sd(x)),add=T,col="blue")
}
## Diversity and Apps production indicators
#Graduate Diversity and Apps production indicators per field
Ano_inicio_prog<-Metric_frame2 %>%
group_by(ANO_INICIO_PROGRAMA) %>%
summarise(media_Div_Prof_Perm = mean(Div_Prof_Perm),
media_Prod_App_prof = mean(Prod_App_prof))%>%
arrange(ANO_INICIO_PROGRAMA)
DT::datatable(Ano_inicio_prog)
Conceito_prog<-Metric_frame2 %>%
group_by(CD_CONCEITO_PROGRAMA) %>%
summarise(media_Div_Prof_Perm = mean(Div_Prof_Perm),
media_Prod_App_prof = mean(Prod_App_prof))%>%
arrange(CD_CONCEITO_PROGRAMA)
DT::datatable(Ano_inicio_prog)
Area_prog<-Metric_frame2 %>%
group_by(NM_AREA_CONHECIMENTO) %>%
summarise(soma_Div_Prof_Perm = sum(Div_Prof_Perm),
soma_Prod_App_prof = sum(Prod_App_prof))%>%
arrange(NM_AREA_CONHECIMENTO)
DT::datatable(Area_prog)
Regiao_prog<-Metric_frame2 %>%
group_by(NM_REGIAO) %>%
summarise(soma_Div_Prof_Perm = sum(Div_Prof_Perm),
soma_Prod_App_prof = sum(Prod_App_prof))%>%
arrange(NM_AREA_CONHECIMENTO)
Regiao_hab_prog$prop_Habitantes_p_Regiao
# Function
# Transform vector into a data frame with frequency of levels and proportion
.Unianalysis = function (x) {
y <- as.data.frame(as.table(table(x)))
y <- mutate(y, proportion = prop.table(y$Freq) *100)#Proportion
y <- arrange(y, desc(y$Freq))
return(y)
}
#1. Area of Professors per program
Area_Form_Prof_prog <-
Professors %>%
filter(seq_tipo_categoria_vinculo == 3)%>%
group_by(cod_programa) %>%
summarise(Area_Formacao_Prof = n_distinct(area_curso_formacao)) %>%
arrange(desc(Area_Formacao_Prof))
dim(Area_Form_Prof_prog )
DT::datatable(Area_Form_Prof_prog)
#2. Permanents Professors per Program
Perm_Prof_prog <-
Professors %>%
filter(seq_tipo_categoria_vinculo == 3)%>%
group_by(cod_programa) %>%
summarise(Professores_Perm = n_distinct(nro_id_cnpq)) %>%
arrange(desc(Professores_Perm))
dim(Perm_Prof_prog)
DT::datatable(Perm_Prof_prog)
#3. Une codigo de programas com quantidade de professores e quantidade de área de formação
Tidy_frame <- merge(Perm_Prof_prog, Area_Form_Prof_prog, all = TRUE)
dim(Tidy_frame)
DT::datatable(Tidy_frame)
#4. Apps per program
App_prog <-
Apps %>%
group_by(CD_PROGRAMA_IES)%>%
summarise(Apps = n_distinct(ID_ADD_PRODUCAO_INTELECTUAL)) %>%
arrange(desc(Apps))
dim(App_prog)
DT::datatable(App_prog)
#5. Concatena Aplicativos com as variáveis anteriores
Tidy_frame2 <- merge(App_prog, Tidy_frame, by.x="CD_PROGRAMA_IES", by.y="cod_programa", all = TRUE)
DT::datatable(Tidy_frame2)
## 6. Variável Calcula as métricas da tese da Vivian
## Div_Prof_Perm: Diversidade de formação dos professores permanentes (DFPP)
## Prod_App_prof: Produtividade de aplicativo por professores permanentes (PAPP)
Metric_frame <-
Tidy_frame2 %>%
group_by(CD_PROGRAMA_IES) %>%
mutate(Div_Prof_Perm = Area_Formacao_Prof / Professores_Perm,
Prod_App_prof = Apps / Professores_Perm)
dim(Metric_frame)
DT::datatable(Metric_frame)
## 7. Variável concatena todas as variáveis anteriores com os metadados dos programas de pós-graduação
Metric_frame2 <- merge(Metric_frame,
Graduate_2016,
by ="CD_PROGRAMA_IES", all = TRUE)
dim(Metric_frame2)
DT::datatable(Metric_frame2)
#Funções para gráficos
#Fun Plot
.Plot_FunPlot = function(x,y) {
fan.plot(x$Freq,
max.span=pi,
labels=paste(x$x, x$Freq, sep=": "),
main=y,ticks=360)
}
# Painel contexto - Região, habitantes por região, programas por região, programas por habitantes por região
#1. Graduate per Region
Regiao_prog  <-.Unianalysis(Metric_frame2$NM_REGIAO)
Regiao_hab_prog <- mutate(Regiao_prog,
Habitantes_p_Regiao = rbind(12342627, 11296224, 46995094, 24546983, 70190565),
prop_Habitantes_p_Regiao = prop.table(Regiao_hab_prog$Habitantes_p_Regiao)*100 )
DT::datatable(Regiao_hab_prog)
x <- barplot(Regiao_hab_prog$proportion,
names.arg= Regiao_hab_prog$x,
ylab="Percentual",
ylim = c(0, 50),
las = 2,
col=rainbow(8),
main="Proporção de PPG por região e habi. por região",border="red")
lines(x, Regiao_hab_prog$prop_Habitantes_p_Regiao, ylim= c(0,100))
x
points(x, Regiao_hab_prog$prop_Habitantes_p_Regiao, ylim= c(0,100))
x
#2. Graduate per State
UF_prog <- .Unianalysis(Metric_frame2$SG_UF_PROGRAMA)
barplot(UF_prog$Freq,
names.arg=UF_prog$x,
xlab="Estados brasileiros",
ylab="Quantidade de programas",
ylim = c(0, 1000),
las = 2,
col=rainbow(8),
main="5. Programas de Pós Graduação por Estado",border="red")
## 1.2 Tabela de programas por Estado
DT::datatable(UF_prog)
#1. Graduate per Public or Private
Pub_Priv_prog  <-.Unianalysis(Metric_frame2$DS_DEPENDENCIA_ADMINISTRATIVA)
.Plot_FunPlot(Pub_Priv_prog, "2. Programa por insti. Publica ou Privada")
#2.  per Type
Tipo_prog <-.Unianalysis(Metric_frame2$NM_GRAU_PROGRAMA)
barplot(Tipo_prog$Freq,
names.arg=paste(as.integer(Tipo_prog$proportion), "%"),
xlab="Percentual",
ylab="Quantidade de programas",
legend=Tipo_prog$x,
col=rainbow(8),
main="3. Programas de Pós Graduação por tipo",border="red")
#3. Graduate per Capes Score
Conceito_prog <- .Unianalysis(Metric_frame2$CD_CONCEITO_PROGRAMA)
barplot(Conceito_prog$Freq,
names.arg=Conceito_prog$x,
xlab="Conceito Capes",
ylab="Quantidade de programas",
legend= paste(as.integer(Conceito_prog$proportion), "%"),
ylim = c(0, 400),
col=rainbow(8),
main="4. Programas de Pós Graduação por Conceito Capes",border="red")
#4. Graduate per field
Area_Avalia_prog <- .Unianalysis(Metric_frame2$NM_AREA_AVALIACAO)
DT::datatable(Area_Avalia_prog)
#5. Programa por ano
Ano_prog <- .Unianalysis(Metric_frame2$ANO_INICIO_PROGRAMA)
Ano_prog <- arrange(Ano_prog, desc(Ano_prog$Freq))
DT::datatable(Ano_prog)
#Histogram
histogram=function(x){
hist(x,prob=T)
lines(density(x),col="red")
curve(dnorm(x,mean(x), sd(x)),add=T,col="blue")
}
## Diversity and Apps production indicators
#Graduate Diversity and Apps production indicators per field
Ano_inicio_prog<-Metric_frame2 %>%
group_by(ANO_INICIO_PROGRAMA) %>%
summarise(media_Div_Prof_Perm = mean(Div_Prof_Perm),
media_Prod_App_prof = mean(Prod_App_prof))%>%
arrange(ANO_INICIO_PROGRAMA)
DT::datatable(Ano_inicio_prog)
Conceito_prog<-Metric_frame2 %>%
group_by(CD_CONCEITO_PROGRAMA) %>%
summarise(media_Div_Prof_Perm = mean(Div_Prof_Perm),
media_Prod_App_prof = mean(Prod_App_prof))%>%
arrange(CD_CONCEITO_PROGRAMA)
DT::datatable(Ano_inicio_prog)
Area_prog<-Metric_frame2 %>%
group_by(NM_AREA_CONHECIMENTO) %>%
summarise(soma_Div_Prof_Perm = sum(Div_Prof_Perm),
soma_Prod_App_prof = sum(Prod_App_prof))%>%
arrange(NM_AREA_CONHECIMENTO)
DT::datatable(Area_prog)
Regiao_prog<-Metric_frame2 %>%
group_by(NM_REGIAO) %>%
summarise(soma_Div_Prof_Perm = sum(Div_Prof_Perm),
soma_Prod_App_prof = sum(Prod_App_prof))%>%
arrange(NM_REGIAO)
DT::datatable(Area_prog)
Regiao_prog  <-.Unianalysis(Metric_frame2$NM_REGIAO)
DT::datatable(Regiao_hab_prog)
library(swril)
library(swirl)
swirl()
6
1/6
(1+2+3+4+5+6) / 6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh + edl) /2)
(edh + edl) /2
integrate(myfinc, 0, 2)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
10 / sqrt(100)
(32-30)/1
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
var.test(M$Div_Prof_Perm, M$Prod_App_prof)
skip()
skip()
skip()
t.test(na.omit(M$Div_Prof_Perm))
library(swirl)
swirl()
dim(fs)
t.test(fs$fheight-fs$sheight)
run 11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0.14453125
.035
skip()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(plotly)
library(ggplot2)
library(tidyr)
library(magrittr)
library(plotrix)
library(rgl)
library(car)
library(lubridate)
library(ggplot2)
library(GGally)
library(corrplot)
library(corrgram)
library(ppcor)
M <- Metric_frame2
MCC <-
M %>%
filter(na.omit(NM_AREA_CONHECIMENTO == "CIÊNCIA DA COMPUTAÇÃO"))
library(dplyr)
library(plotly)
library(ggplot2)
library(tidyr)
library(magrittr)
library(plotrix)
library(rgl)
library(car)
library(lubridate)
library(ggplot2)
library(GGally)
library(corrplot)
library(corrgram)
library(ppcor)
M <- Metric_frame2
MCC <-
M %>%
filter(NM_AREA_CONHECIMENTO == "CIÊNCIA DA COMPUTAÇÃO")
M
dim(MCC)
mean(MCC$Div_Prof_Perm)
mean(na.omit(MCC$Div_Prof_Perm))
mean(na.omit(MCC$Prod_App_prof))
M <- Metric_frame2
MCC <-
M %>%
filter(NM_AREA_CONHECIMENTO == "CIÊNCIA DA COMPUTAÇÃO")
controle <-na.omit(MCC$Div_Prof_Perm)
experimental <- na.omit(M$Div_Prof_Perm)
t.test(controle, experimental)
boxplot(controle, experimental)
dim(controle)
controle <-na.omit(MCC$Div_Prof_Perm)
dim(controle)
controle <-MCC$Div_Prof_Perm
dim(controle)
MCC$Div_Prof_Perm
length(controle)
controle <-na.omit(MCC$Div_Prof_Perm)
experimental <- na.omit(M$Div_Prof_Perm[1:77])
t.test(controle, experimental, paired = TRUE)
controle <-na.omit(MCC$Div_Prof_Perm)
experimental <- na.omit(M$Div_Prof_Perm[1:77])
t.test(controle, experimental)
mean(na.omit(M$Div_Prof_Perm))
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver) #ciencia da computacao
media_diver <- mean(na.omit(M$Div_Prof_Perm))
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver) #ciencia da computacao
experimental
dim(experimental)
media_diver <- mean(na.omit(M$Div_Prof_Perm))
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver) #ciencia da computacao
select(na.omit(Prod_App_prof))
Metric_frame2 <- merge(Metric_frame,
Graduate_2016,
by ="CD_PROGRAMA_IES", all.x = TRUE)
dim(Metric_frame2)
DT::datatable(Metric_frame2)
View(Metric_frame2)
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver) #ciencia da computacao
select(na.omit(Prod_App_prof))
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver)  %>% #ciencia da computacao
select(na.omit(Prod_App_prof))
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver)  %>% #ciencia da computacao
select(Prod_App_prof)
dim(experimental <- na.omit(experimental$Prod_App_prof))
length(experimental <- na.omit(experimental$Prod_App_prof))
experimental <- na.omit(experimental$Prod_App_prof)
na.omit(experimental$Prod_App_prof)
na.omit(experimental$Prod_App_prof)
experimental$Prod_App_prof
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver)  %>% #ciencia da computacao
experimental <-
M %>%
filter(Div_Prof_Perm > media_diver)
experimental <- na.omit(experimental$Prod_App_prof)
length(experimental)
t.test(controle_aleatorio, experimental)
experimental <- na.omit(experimental$Prod_App_prof)
controle_CC <-na.omit(MCC$Prod_App_prof)
controle_aleatorio <- na.omit(M$Prod_App_prof[1:length(experimental)])
t.test(controle_aleatorio, experimental)
quantile(experimental)
experimental <- quantile(na.omit(experimental$Prod_App_prof), .99)
# Function
# Transform vector into a data frame with frequency of levels and proportion
.Unianalysis = function (x) {
y <- as.data.frame(as.table(table(x)))
y <- mutate(y, proportion = prop.table(y$Freq) *100)#Proportion
y <- arrange(y, desc(y$Freq))
return(y)
}
#1. Area of Professors per program
Area_Form_Prof_prog <-
Professors %>%
filter(seq_tipo_categoria_vinculo == 3)%>%
group_by(cod_programa) %>%
summarise(Area_Formacao_Prof = n_distinct(area_curso_formacao)) %>%
arrange(desc(Area_Formacao_Prof))
dim(Area_Form_Prof_prog )
DT::datatable(Area_Form_Prof_prog)
#2. Permanents Professors per Program
Perm_Prof_prog <-
Professors %>%
filter(seq_tipo_categoria_vinculo == 3)%>%
group_by(cod_programa) %>%
summarise(Professores_Perm = n_distinct(nro_id_cnpq)) %>%
arrange(desc(Professores_Perm))
dim(Perm_Prof_prog)
DT::datatable(Perm_Prof_prog)
#3. Une codigo de programas com quantidade de professores e quantidade de ?rea de forma??o
Tidy_frame <- merge(Perm_Prof_prog, Area_Form_Prof_prog, all = TRUE)
dim(Tidy_frame)
DT::datatable(Tidy_frame)
#4. Apps per program
App_prog <-
Apps %>%
group_by(CD_PROGRAMA_IES)%>%
summarise(Apps = n_distinct(ID_ADD_PRODUCAO_INTELECTUAL)) %>%
arrange(desc(Apps))
dim(App_prog)
DT::datatable(App_prog)
#5. Concatena Aplicativos com as vari?veis anteriores
Tidy_frame2 <- merge(App_prog, Tidy_frame, by.x="CD_PROGRAMA_IES", by.y="cod_programa", all.x = TRUE)
dim(Tidy_frame2)
DT::datatable(Tidy_frame2)
## 6. Vari?vel Calcula as m?tricas da tese da Vivian
## Div_Prof_Perm: Diversidade de forma??o dos professores permanentes (DFPP)
## Prod_App_prof: Produtividade de aplicativo por professores permanentes (PAPP)
Metric_frame <-
Tidy_frame2 %>%
group_by(CD_PROGRAMA_IES) %>%
mutate(Div_Prof_Perm = as.integer((Area_Formacao_Prof / Professores_Perm) * 100),                    Prod_App_prof = as.integer((Apps / Professores_Perm) * 100))
dim(Metric_frame)
DT::datatable(Metric_frame)
## 7. Vari?vel concatena todas as vari?veis anteriores com os metadados dos programas de p?s-gradua??o
Metric_frame2 <- merge(Metric_frame,
Graduate_2016,
by ="CD_PROGRAMA_IES", all.x = TRUE)
dim(Metric_frame2)
DT::datatable(Metric_frame2)
qnt.95_diver <- quantile(M$Div_Prof_Perm, .95, na.rm = TRUE)
qnt.95_diver
experimental <-
M %>%
filter(Div_Prof_Perm >= qnt.95_diver)  #ciencia da computacao
dim(experimental)
experimental <- na.omit(experimental$Prod_App_prof)
length(experimental)
controle_aleatorio <- na.omit(M$Prod_App_prof[1:length(experimental)])
t.test(experimental, controle_aleatorio)
experimental
boxplot(controle_aleatorio, experimental, controle_CC)
experimental <-
M %>%
filter(Div_Prof_Perm >= qnt.95_diver)  #ciencia da computac
View(experimental)
boxplot(controle_aleatorio, controle_CC, experimental, x=c("Aleatória", "C. Computação", "Experimental"), col=my_colors)
boxplot(controle_aleatorio, controle_CC, experimental,
xlab=c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
experimental <- na.omit(experimental$Prod_App_prof)
controle_CC <-na.omit(MCC$Prod_App_prof)
controle_aleatorio <- na.omit(M$Prod_App_prof[1:length(experimental)])
boxplot(controle_aleatorio, controle_CC, experimental,
xlab=c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
boxplot(controle_aleatorio, controle_CC, experimental,
x=c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
boxplot(controle_aleatorio, controle_CC, experimental, f,
xlab=c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
boxplot(controle_aleatorio, controle_CC, experimental, outline = FALSE
xlab=c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
boxplot(controle_aleatorio, controle_CC, experimental, outline = FALSE,
xlab=c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
boxplot(controle_aleatorio, controle_CC, experimental, outline = FALSE,
names = c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
library(dplyr)
library(plotly)
library(ggplot2)
library(tidyr)
library(magrittr)
library(plotrix)
library(rgl)
library(car)
library(lubridate)
library(ggplot2)
library(GGally)
library(corrplot)
library(corrgram)
library(ppcor)
M <- Metric_frame2
MCC <-
M %>%
filter(NM_AREA_CONHECIMENTO == "CIÊNCIA DA COMPUTAÇÃO") #ciencia da computacao
qnt.95_diver <- quantile(M$Div_Prof_Perm, .5, na.rm = TRUE)
experimental <-
M %>%
filter(Div_Prof_Perm >= qnt.95_diver)  #ciencia da computacao
experimental <- na.omit(experimental$Prod_App_prof)
controle_CC <-na.omit(MCC$Prod_App_prof)
controle_aleatorio <- na.omit(M$Prod_App_prof[1:length(experimental)])
t.test(experimental, controle_aleatorio)
t.test(controle_aleatorio, experimental)
boxplot(controle_aleatorio, controle_CC, experimental, outline = FALSE,
names = c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
boxplot(controle_aleatorio, controle_CC, experimental, outline = FALSE,
names = c("Aleatória", "C. Computação", "Experimental"),
col = c("yellow", "orange", "red"))
boxplot(controle_aleatorio, controle_CC, experimental, outline = FALSE,
names = c("Aleatória", "C. Computação", "Alta diversidade"),
col = c("yellow", "orange", "red"))
knit_with_parameters('~/Artigo-da-tese-de-vivian-master2/Diversidade e Producao nos PPG.Rmd', encoding = 'ISO-8859-7')
boxplot(controle_CC, controle_aleatorio, experimental, outline = FALSE,
names = c("C. Computacao","Aleatoria", "Alta diversidade"),
col = c("yellow", "orange", "red"),
main = "Medias dos grupos de controle e experimental")
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL","pt_BR.UTF-8")
